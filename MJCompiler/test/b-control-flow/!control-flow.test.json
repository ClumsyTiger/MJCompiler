// IMPORTANT: all paths here should be relative to this (test batch) file!
{
    "BatchName": "Control flow tests",
    "TestGroupList": [
        {
            "TestGroupName": "If-else compilation",
            "FilePath": "./if-else.mj",
            "ExCompileOutput": [],
            "ExExitCode": 0,
            "TestUnitList": [
                {
                    "TestName": "If-else input 1",
                    "TestInput": [],
                    "ExTestOutput": [
                        "A B C D F G H J ",
                    ],
                    "ExExitCode": 0,
                },
            ],
        },
        {
            "TestGroupName": "Do-while compilation",
            "FilePath": "./do-while.mj",
            "ExCompileOutput": [],
            "ExExitCode": 0,
            "TestUnitList": [
                {
                    "TestName": "Do-while input 1",
                    "TestInput": [],
                    "ExTestOutput": [
                        "A B E F G H H I K B C B D L ",
                    ],
                    "ExExitCode": 0,
                },
            ],
        },
        {
            "TestGroupName": "Switch compilation",
            "FilePath": "./switch.mj",
            "ExCompileOutput": [],
            "ExExitCode": 0,
            "TestUnitList": [
                {
                    "TestName": "Switch input 1",
                    "TestInput": [],
                    "ExTestOutput": [
                        "A C E F B G C D G G C D G H J K ",
                    ],
                    "ExExitCode": 0,
                },
            ],
        },
        {
            "TestGroupName": "Goto compilation",
            "FilePath": "./goto.mj",
            "ExCompileOutput": [],
            "ExExitCode": 0,
            "TestUnitList": [
                {
                    "TestName": "Goto input 1",
                    "TestInput": [],
                    "ExTestOutput": [
                        "A B D E F G B F E F G B G B G B G B G B G B G C J ",
                    ],
                    "ExExitCode": 0,
                },
            ],
        },
        {
            "TestGroupName": "Flow compilation",
            "FilePath": "./flow.mj",
            "ExCompileOutput": [],
            "ExExitCode": 0,
            "TestUnitList": [
                {
                    "TestName": "Flow input 1",
                    "TestInput": [],
                    "ExTestOutput": [
                        "A B C D E C D E C D F H C D G C I Q Q J K N O M N O L P S ",
                    ],
                    "ExExitCode": 0,
                },
            ],
        },
        {
            "TestGroupName": "Flow errors",
            "FilePath": "./flow-error.mj",
            "ExCompileOutput": [
                "Ln 20  Col 8   SYN     Bad expression",
                "```arr = new int['c'```",
                "Ln 23  Col 19  SYN     Bad expression",
                "```]```",
                "Ln 36  Col 14  SYN     Bad statement",
                "```5*6 )```",
                "Ln 43  Col 17  SYN     Bad expression",
                "```'c': ;",
                "            case true: ;",
                "        }",
                "        switch( 1```",
                "Ln 57  Col 11  SYN     Bad statement",
                "```while( true )```",
                "Ln 9   Col 8   SEM     Label already exists in the function scope",
                "```A```",
                "Ln 16  Col 8   SEM     Expected type here, but this symbol has not been declared",
                "```C```",
                "Ln 18  Col 18  SEM     Cannot instantiate a non-class type",
                "```int```",
                "Ln 23  Col 17  SEM     Expected type here, but this symbol has not been declared",
                "```C```",
                "Ln 24  Col 17  SEM     Expected type here, but this symbol has not been declared",
                "```C```",
                "Ln 26  Col 12  SEM     This expression must result in a bool",
                "```5```",
                "Ln 28  Col 12  SEM     The left side of the addition is not an int",
                "```c1```",
                "Ln 28  Col 17  SEM     The right side of the addition is not an int",
                "```c2```",
                "Ln 29  Col 8   SEM     This designator must be of type int to be incremented/decremented",
                "```c1```",
                "Ln 30  Col 14  SEM     This signed expression must result in an int",
                "```c1```",
                "Ln 31  Col 8   SEM     This designator is not an lvalue and cannot be incremented/decremented",
                "```con```",
                "Ln 32  Col 8   SEM     This designator is not assignable to",
                "```con```",
                "Ln 1   Col 0   SEM     This designator is not an lvalue and cannot be read into",
                "```program```",
                "Ln 37  Col 14  SEM     This designator is not an lvalue and cannot be read into",
                "```con```",
                "Ln 38  Col 15  SEM     This expression must be a primitive type",
                "```c1```",
                "Ln 1   Col 0   SEM     Continue has no effect here (it must be inside a do-while statement)",
                "```program```",
                "Ln 1   Col 0   SEM     Break has no effect here (it must be inside a do-while or switch statement)",
                "```program```",
                "Ln 50  Col 15  SEM     Return expression is not equivalent to or a subtype of the method return type",
                "```1```",
                "Ln 52  Col 16  SEM     Switch expression must result in an int",
                "```true```",
                "Ln 53  Col 16  SEM     Switch expression must result in an int",
                "```'c'```",
                "Ln 55  Col 27  SEM     The right side of the addition is not an int",
                "```true```",
                "Ln 55  Col 21  SEM     This expression must result in a bool",
                "```5```",
                "Ln 56  Col 20  SEM     This expression must result in a bool",
                "```5```",
                "Ln 59  Col 13  SEM     Label does not exist in the function scope",
                "```A```",
                "Ln 1   Col 8   SEM     Main function can't have parameters",
                "```__flow_error__```",
                "",
                "Lexer: 0   Syntax: 5   Semantic: 25 ",
                "",
            ],
            "ExExitCode": -1,
            "TestUnitList": [],
        },
    ]
}

