// IMPORTANT: all paths here should be relative to this (test batch) file!
{
    "BatchName": "Control flow tests",
    "TestGroupList": [
        {
            "TestGroupName": "If-else compilation",
            "FilePath": "./if-else.mj",
            "ExCompileOutput": [],
            "ExExitCode": 0,
            "TestUnitList": [
                {
                    "TestName": "If-else input 1",
                    "TestInput": [],
                    "ExTestOutput": [
                        "A B C D F G H J ",
                    ],
                    "ExExitCode": 0,
                },
            ],
        },
        {
            "TestGroupName": "Do-while compilation",
            "FilePath": "./do-while.mj",
            "ExCompileOutput": [],
            "ExExitCode": 0,
            "TestUnitList": [
                {
                    "TestName": "Do-while input 1",
                    "TestInput": [],
                    "ExTestOutput": [
                        "A B E F G H H I K B C B D L ",
                    ],
                    "ExExitCode": 0,
                },
            ],
        },
        {
            "TestGroupName": "Switch compilation",
            "FilePath": "./switch.mj",
            "ExCompileOutput": [],
            "ExExitCode": 0,
            "TestUnitList": [
                {
                    "TestName": "Switch input 1",
                    "TestInput": [],
                    "ExTestOutput": [
                        "A C E F B G C D G G C D G H J K ",
                    ],
                    "ExExitCode": 0,
                },
            ],
        },
        {
            "TestGroupName": "Goto compilation",
            "FilePath": "./goto.mj",
            "ExCompileOutput": [],
            "ExExitCode": 0,
            "TestUnitList": [
                {
                    "TestName": "Goto input 1",
                    "TestInput": [],
                    "ExTestOutput": [
                        "A B D E F G B F E F G B G B G B G B G B G B G C J ",
                    ],
                    "ExExitCode": 0,
                },
            ],
        },
        {
            "TestGroupName": "Short-circuit compilation",
            "FilePath": "./short-circuit.mj",
            "ExCompileOutput": [],
            "ExExitCode": 0,
            "TestUnitList": [
                {
                    "TestName": "Short-circuit input 1",
                    "TestInput": [],
                    "ExTestOutput": [
                        "----------",
                        "A ok ",
                        "A ok ",
                        "----------",
                        "A ok ",
                        "A ok ",
                        "A B ok ",
                        "A B ok ",
                        "----------",
                        "A B ok ",
                        "A B ok ",
                        "A ok ",
                        "A ok ",
                        "----------",
                        "A B ok ",
                        "A B ok ",
                        "A B C ok ",
                        "A B C ok ",
                        "A C ok ",
                        "A C ok ",
                        "A C ok ",
                        "A C ok ",
                        "----------",
                        "A ok ",
                        "A ok ",
                        "A ok ",
                        "A ok ",
                        "A B C ok ",
                        "A B C ok ",
                        "A B ok ",
                        "A B ok ",
                        "----------",
                        "A B ok ",
                        "A B ok ",
                        "A B C ok ",
                        "A B C ok ",
                        "A ok ",
                        "A ok ",
                        "A ok ",
                        "A ok ",
                        "----------",
                        "A C ok ",
                        "A C ok ",
                        "A C ok ",
                        "A C ok ",
                        "A B C ok ",
                        "A B C ok ",
                        "A B ok ",
                        "A B ok ",
                        "----------",
                        "A E ok ",
                        "A B E ok ",
                        "A B C D E ok ",
                        "A B C ok ",
                        "A B C ok ",
                        "A B C ok ",
                        "----------",
                        "A D E ok ",
                        "A B D E ok ",
                        "A B C D E ok ",
                        "A B C ok ",
                        "A B C ok ",
                        "A B C ok ",
                        "M N D E Q I J R ok ",
                        "M A B D E Q I J R ok ",
                        "M A B D E Q I J R ok ",
                        "M A C D E Q I J R ok ",
                        "M A C D E Q I J R ok ",
                        "M A C H I J R ok ",
                        "M A C H I J R ok ",
                        "M A C H I J R ok ",
                        "M A C H I J R ok ",
                        "M A C H I J R ok ",
                        "M A C H I J R ok ",
                        "M A C H K R ok ",
                        "M A C H K R ok ",
                        "M A C H K R ok ",
                        "M A C H K L ok ",
                        "M A C H K L ok ",
                        "M A C H K L ok ",
                        "",
                    ],
                    "ExExitCode": 0,
                },
            ],
        },
        {
            "TestGroupName": "Flow compilation",
            "FilePath": "./flow.mj",
            "ExCompileOutput": [],
            "ExExitCode": 0,
            "TestUnitList": [
                {
                    "TestName": "Flow input 1",
                    "TestInput": [],
                    "ExTestOutput": [
                        "A B C D E C D E C D F H C D G C I Q Q J K N O M N O L P S ",
                    ],
                    "ExExitCode": 0,
                },
            ],
        },
        {
            "TestGroupName": "Flow errors",
            "FilePath": "./flow-error.mj",
            "ExCompileOutput": [
                "__main__.mj:20:8: Syntax: Bad expression",
                "    19 |         arr = new int[false]",
                "  > 20 |         arr = new int['c'];",
                "       |         ^             *    ",
                "    21 |         arr = new int[-5];",
                "",
                "__main__.mj:23:19: Syntax: Bad expression",
                "    22 | ",
                "  > 23 |         c1 = new C[];",
                "       |                    ^ ",
                "    24 |         c2 = new C;",
                "",
                "__main__.mj:36:14: Syntax: Bad statement",
                "    35 |         read( null );",
                "  > 36 |         read( 5*6 );",
                "       |               ^   * ",
                "    37 |         read( con );",
                "",
                "__main__.mj:43:17: Syntax: Bad expression",
                "    40 |         switch( 1 )",
                "    41 |         {",
                "    42 |             case 0: ;",
                "  > 43 |             case 'c': ;",
                "       |                  ^     ",
                "    44 |             case true: ;",
                "    45 |         }",
                "  * 46 |         switch( 1 ) {}",
                "       |                 *     ",
                "    47 | ",
                "    48 |         continue;",
                "    49 |         break;",
                "",
                "__main__.mj:57:11: Syntax: Bad statement",
                "    56 |         do ; while( 5*6 );",
                "  > 57 |         do while( true );",
                "       |            ^           * ",
                "    58 | ",
                "",
                "__main__.mj:9:8: Semantic: Label already exists in the function scope",
                "     8 |         A: ;",
                "   > 9 |         A: ;",
                "       |         ^   ",
                "    10 |     }",
                "",
                "__main__.mj:16:8: Semantic: Expected type here, but this symbol has not been declared",
                "    15 |         char c;",
                "  > 16 |         C c1, c2;",
                "       |         ^        ",
                "    17 |     {",
                "",
                "__main__.mj:18:18: Semantic: Cannot instantiate a non-class type",
                "    17 |     {",
                "  > 18 |         arr = new int;",
                "       |                   ^   ",
                "    19 |         arr = new int[false]",
                "",
                "__main__.mj:23:17: Semantic: Expected type here, but this symbol has not been declared",
                "    22 | ",
                "  > 23 |         c1 = new C[];",
                "       |                  ^   ",
                "    24 |         c2 = new C;",
                "",
                "__main__.mj:24:17: Semantic: Expected type here, but this symbol has not been declared",
                "    23 |         c1 = new C[];",
                "  > 24 |         c2 = new C;",
                "       |                  ^ ",
                "    25 | ",
                "",
                "__main__.mj:26:12: Semantic: This expression must result in a bool",
                "    25 | ",
                "  > 26 |         if( 5*6 );",
                "       |             ^     ",
                "    27 |         if( c1 < c2 );",
                "",
                "__main__.mj:28:12: Semantic: The left side of the addition is not an int",
                "    27 |         if( c1 < c2 );",
                "  > 28 |         if( c1 + c2 == null );",
                "       |             ^                 ",
                "    29 |         c1++;",
                "",
                "__main__.mj:28:17: Semantic: The right side of the addition is not an int",
                "    27 |         if( c1 < c2 );",
                "  > 28 |         if( c1 + c2 == null );",
                "       |                  ^            ",
                "    29 |         c1++;",
                "",
                "__main__.mj:29:8: Semantic: This designator must be of type int to allow being incremented/decremented",
                "    28 |         if( c1 + c2 == null );",
                "  > 29 |         c1++;",
                "       |         ^    ",
                "    30 |         c1 = -c1;",
                "",
                "__main__.mj:30:14: Semantic: This signed expression must result in an int",
                "    29 |         c1++;",
                "  > 30 |         c1 = -c1;",
                "       |               ^  ",
                "    31 |         con++;",
                "",
                "__main__.mj:31:8: Semantic: This designator is not an lvalue and cannot be incremented/decremented",
                "    30 |         c1 = -c1;",
                "  > 31 |         con++;",
                "       |         ^     ",
                "    32 |         con = con*2 + 1;",
                "",
                "__main__.mj:32:8: Semantic: This designator is not assignable to",
                "    31 |         con++;",
                "  > 32 |         con = con*2 + 1;",
                "       |         ^               ",
                "    33 | ",
                "",
                "__main__.mj:1:0: Semantic: This designator is not an lvalue and cannot be read into",
                "   > 1 | program __flow_error__",
                "       | ^                     ",
                "     2 | ",
                "",
                "__main__.mj:37:14: Semantic: This designator is not an lvalue and cannot be read into",
                "    36 |         read( 5*6 );",
                "  > 37 |         read( con );",
                "       |               ^     ",
                "    38 |         print( c1 );",
                "",
                "__main__.mj:38:15: Semantic: This expression must be a primitive type",
                "    37 |         read( con );",
                "  > 38 |         print( c1 );",
                "       |                ^    ",
                "    39 | ",
                "",
                "__main__.mj:1:0: Semantic: Continue has no effect here (it must be inside a do-while statement)",
                "   > 1 | program __flow_error__",
                "       | ^                     ",
                "     2 | ",
                "",
                "__main__.mj:1:0: Semantic: Break has no effect here (it must be inside a do-while or switch statement)",
                "   > 1 | program __flow_error__",
                "       | ^                     ",
                "     2 | ",
                "",
                "__main__.mj:50:15: Semantic: Return expression is not equivalent to or a subtype of the method return type",
                "    49 |         break;",
                "  > 50 |         return 1;",
                "       |                ^ ",
                "    51 | ",
                "",
                "__main__.mj:52:16: Semantic: Switch expression must result in an int",
                "    51 | ",
                "  > 52 |         switch( true ) {}",
                "       |                 ^        ",
                "    53 |         switch( 'c' ) {}",
                "",
                "__main__.mj:53:16: Semantic: Switch expression must result in an int",
                "    52 |         switch( true ) {}",
                "  > 53 |         switch( 'c' ) {}",
                "       |                 ^       ",
                "    54 | ",
                "",
                "__main__.mj:55:27: Semantic: The right side of the addition is not an int",
                "    54 | ",
                "  > 55 |         do {} while( 5*6 - true );",
                "       |                            ^      ",
                "    56 |         do ; while( 5*6 );",
                "",
                "__main__.mj:55:21: Semantic: This expression must result in a bool",
                "    54 | ",
                "  > 55 |         do {} while( 5*6 - true );",
                "       |                      ^            ",
                "    56 |         do ; while( 5*6 );",
                "",
                "__main__.mj:56:20: Semantic: This expression must result in a bool",
                "    55 |         do {} while( 5*6 - true );",
                "  > 56 |         do ; while( 5*6 );",
                "       |                     ^     ",
                "    57 |         do while( true );",
                "",
                "__main__.mj:59:13: Semantic: Label does not exist in the function scope",
                "    58 | ",
                "  > 59 |         goto A;",
                "       |              ^ ",
                "    60 |     }",
                "",
                "__main__.mj:1:8: Semantic: Main function can't have parameters",
                "   > 1 | program __flow_error__",
                "       |         ^             ",
                "     2 | ",
                "",
                "Lexical: 0   Syntax: 5   Semantic: 25 ",
                "",
            ],
            "ExExitCode": -1,
            "TestUnitList": [],
        },
    ]
}

