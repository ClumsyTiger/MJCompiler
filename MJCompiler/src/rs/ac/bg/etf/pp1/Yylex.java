/* The following code was generated by JFlex 1.4.3 on 08/08/2021, 15:21 */

// ________________________________________________________________________________________________
// import section
package rs.ac.bg.etf.pp1;
import java_cup.runtime.Symbol;


// ________________________________________________________________________________________________
// directive section

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 08/08/2021, 15:21 from the specification file
 * <tt>./MJCompiler/spec/mjlexer.flex</tt>
 */
class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\22\1\3\1\2\1\0\1\3\1\1\16\22\4\0\1\3\1\45"+
    "\2\0\1\21\1\43\1\50\1\20\1\62\1\63\1\5\1\41\1\56"+
    "\1\42\1\57\1\4\1\6\11\7\1\67\1\55\1\47\1\44\1\46"+
    "\1\66\1\0\32\21\1\64\1\0\1\65\1\0\1\21\1\0\1\15"+
    "\1\37\1\27\1\32\1\13\1\14\1\25\1\36\1\34\1\21\1\40"+
    "\1\16\1\26\1\30\1\24\1\23\1\21\1\11\1\17\1\10\1\12"+
    "\1\33\1\35\1\31\2\21\1\60\1\51\1\61\1\0\41\22\2\0"+
    "\4\21\4\0\1\21\2\0\1\22\7\0\1\21\4\0\1\21\5\0"+
    "\27\21\1\0\12\21\1\52\24\21\1\0\u01ca\21\4\0\14\21\16\0"+
    "\5\21\7\0\1\21\1\0\1\21\21\0\160\22\5\21\1\0\2\21"+
    "\2\0\4\21\1\0\1\21\6\0\1\21\1\0\3\21\1\0\1\21"+
    "\1\0\24\21\1\0\123\21\1\0\213\21\1\0\5\22\2\0\246\21"+
    "\1\0\46\21\2\0\1\21\6\0\51\21\6\0\1\21\1\0\55\22"+
    "\1\0\1\22\1\0\2\22\1\0\2\22\1\0\1\22\10\0\33\21"+
    "\4\0\4\21\15\0\6\22\5\0\1\21\4\0\13\22\1\0\1\22"+
    "\3\0\53\21\37\22\4\0\2\21\1\22\143\21\1\0\1\21\10\22"+
    "\1\0\6\22\2\21\2\22\1\0\4\22\2\21\12\22\3\21\2\0"+
    "\1\21\17\0\1\22\1\21\1\22\36\21\33\22\2\0\131\21\13\22"+
    "\1\21\16\0\12\22\41\21\11\22\2\21\4\0\1\21\2\0\1\22"+
    "\30\21\4\22\1\21\11\22\1\21\3\22\1\21\5\22\22\0\31\21"+
    "\3\22\4\0\13\21\65\0\25\21\1\0\22\21\13\0\61\22\66\21"+
    "\3\22\1\21\22\22\1\21\7\22\12\21\2\22\2\0\12\22\1\0"+
    "\20\21\3\22\1\0\10\21\2\0\2\21\2\0\26\21\1\0\7\21"+
    "\1\0\1\21\3\0\4\21\2\0\1\22\1\21\7\22\2\0\2\22"+
    "\2\0\3\22\1\21\10\0\1\22\4\0\2\21\1\0\3\21\2\22"+
    "\2\0\12\22\4\21\7\0\2\21\1\0\1\22\2\0\3\22\1\0"+
    "\6\21\4\0\2\21\2\0\26\21\1\0\7\21\1\0\2\21\1\0"+
    "\2\21\1\0\2\21\2\0\1\22\1\0\5\22\4\0\2\22\2\0"+
    "\3\22\3\0\1\22\7\0\4\21\1\0\1\21\7\0\14\22\3\21"+
    "\1\22\13\0\3\22\1\0\11\21\1\0\3\21\1\0\26\21\1\0"+
    "\7\21\1\0\2\21\1\0\5\21\2\0\1\22\1\21\10\22\1\0"+
    "\3\22\1\0\3\22\2\0\1\21\17\0\2\21\2\22\2\0\12\22"+
    "\1\0\1\21\7\0\1\21\6\22\1\0\3\22\1\0\10\21\2\0"+
    "\2\21\2\0\26\21\1\0\7\21\1\0\2\21\1\0\5\21\2\0"+
    "\1\22\1\21\7\22\2\0\2\22\2\0\3\22\7\0\3\22\4\0"+
    "\2\21\1\0\3\21\2\22\2\0\12\22\1\0\1\21\20\0\1\22"+
    "\1\21\1\0\6\21\3\0\3\21\1\0\4\21\3\0\2\21\1\0"+
    "\1\21\1\0\2\21\3\0\2\21\3\0\3\21\3\0\14\21\4\0"+
    "\5\22\3\0\3\22\1\0\4\22\2\0\1\21\6\0\1\22\16\0"+
    "\12\22\11\0\1\21\6\0\5\22\10\21\1\0\3\21\1\0\27\21"+
    "\1\0\20\21\3\0\1\21\7\22\1\0\3\22\1\0\4\22\7\0"+
    "\2\22\1\0\3\21\5\0\2\21\2\22\2\0\12\22\20\0\1\21"+
    "\3\22\1\0\10\21\1\0\3\21\1\0\27\21\1\0\12\21\1\0"+
    "\5\21\2\0\1\22\1\21\7\22\1\0\3\22\1\0\4\22\7\0"+
    "\2\22\7\0\1\21\1\0\2\21\2\22\2\0\12\22\1\0\2\21"+
    "\15\0\4\22\11\21\1\0\3\21\1\0\51\21\2\22\1\21\7\22"+
    "\1\0\3\22\1\0\4\22\1\21\5\0\3\21\1\22\7\0\3\21"+
    "\2\22\2\0\12\22\12\0\6\21\1\0\3\22\1\0\22\21\3\0"+
    "\30\21\1\0\11\21\1\0\1\21\2\0\7\21\3\0\1\22\4\0"+
    "\6\22\1\0\1\22\1\0\10\22\6\0\12\22\2\0\2\22\15\0"+
    "\60\21\1\22\2\21\7\22\4\0\10\21\10\22\1\0\12\22\47\0"+
    "\2\21\1\0\1\21\1\0\5\21\1\0\30\21\1\0\1\21\1\0"+
    "\12\21\1\22\2\21\11\22\1\21\2\0\5\21\1\0\1\21\1\0"+
    "\6\22\2\0\12\22\2\0\4\21\40\0\1\21\27\0\2\22\6\0"+
    "\12\22\13\0\1\22\1\0\1\22\1\0\1\22\4\0\2\22\10\21"+
    "\1\0\44\21\4\0\24\22\1\0\2\22\5\21\13\22\1\0\44\22"+
    "\11\0\1\22\71\0\53\21\24\22\1\21\12\22\6\0\6\21\4\22"+
    "\4\21\3\22\1\21\3\22\2\21\7\22\3\21\4\22\15\21\14\22"+
    "\1\21\17\22\2\0\46\21\1\0\1\21\5\0\1\21\2\0\53\21"+
    "\1\0\u014d\21\1\0\4\21\2\0\7\21\1\0\1\21\1\0\4\21"+
    "\2\0\51\21\1\0\4\21\2\0\41\21\1\0\4\21\2\0\7\21"+
    "\1\0\1\21\1\0\4\21\2\0\17\21\1\0\71\21\1\0\4\21"+
    "\2\0\103\21\2\0\3\22\40\0\20\21\20\0\126\21\2\0\6\21"+
    "\3\0\u026c\21\2\0\21\21\1\0\32\21\5\0\113\21\3\0\13\21"+
    "\7\0\15\21\1\0\4\21\3\22\13\0\22\21\3\22\13\0\22\21"+
    "\2\22\14\0\15\21\1\0\3\21\1\0\2\22\14\0\64\21\40\22"+
    "\3\0\1\21\3\0\2\21\1\22\2\0\12\22\41\0\4\22\1\0"+
    "\12\22\6\0\131\21\7\0\5\21\2\22\42\21\1\22\1\21\5\0"+
    "\106\21\12\0\37\21\1\0\14\22\4\0\14\22\12\0\12\22\36\21"+
    "\2\0\5\21\13\0\54\21\4\0\32\21\6\0\12\22\46\0\27\21"+
    "\5\22\4\0\65\21\12\22\1\0\35\22\2\0\13\22\6\0\12\22"+
    "\15\0\1\21\10\0\16\22\1\0\2\22\77\0\5\22\57\21\21\22"+
    "\7\21\4\0\12\22\21\0\11\22\14\0\3\22\36\21\15\22\2\21"+
    "\12\22\54\21\16\22\14\0\44\21\24\22\10\0\12\22\3\0\3\21"+
    "\12\22\44\21\2\0\11\21\7\0\53\21\2\0\3\21\20\0\3\22"+
    "\1\0\25\22\4\21\1\22\6\21\1\22\2\21\3\22\1\21\5\0"+
    "\300\21\72\22\1\0\5\22\u0116\21\2\0\6\21\2\0\46\21\2\0"+
    "\6\21\2\0\10\21\1\0\1\21\1\0\1\21\1\0\1\21\1\0"+
    "\37\21\2\0\65\21\1\0\7\21\1\0\1\21\3\0\3\21\1\0"+
    "\7\21\3\0\4\21\2\0\6\21\4\0\15\21\5\0\3\21\1\0"+
    "\7\21\16\0\5\22\32\0\5\22\20\0\2\21\23\0\1\21\13\0"+
    "\5\22\1\0\12\22\1\0\1\21\15\0\1\21\20\0\15\21\3\0"+
    "\14\21\1\53\23\21\20\0\15\22\4\0\1\22\3\0\14\22\21\0"+
    "\1\21\4\0\1\21\2\0\12\21\1\0\1\21\3\0\5\21\6\0"+
    "\1\21\1\0\1\21\1\0\1\21\1\0\4\21\1\0\13\21\2\0"+
    "\4\21\5\0\5\21\4\0\1\21\21\0\51\21\u0a77\0\57\21\1\0"+
    "\57\21\1\0\205\21\6\0\4\21\3\22\2\21\14\0\46\21\1\0"+
    "\1\21\5\0\1\21\2\0\70\21\7\0\1\21\17\0\1\22\27\21"+
    "\11\0\7\21\1\0\7\21\1\0\7\21\1\0\7\21\1\0\7\21"+
    "\1\0\7\21\1\0\7\21\1\0\7\21\1\0\40\22\57\0\1\21"+
    "\u01d5\0\3\21\31\0\11\21\6\22\1\0\5\21\2\0\5\21\4\0"+
    "\126\21\2\0\2\22\2\0\3\21\1\0\132\21\1\0\4\21\5\0"+
    "\53\21\1\0\136\21\21\0\40\21\60\0\20\21\u0200\0\u19c0\21\100\0"+
    "\u51fd\21\3\0\u048d\21\103\0\56\21\2\0\u010d\21\3\0\20\21\12\22"+
    "\2\21\24\0\57\21\1\22\4\0\12\22\1\0\37\21\2\22\120\21"+
    "\2\22\45\0\11\21\2\0\147\21\2\0\65\21\2\0\11\21\52\0"+
    "\15\21\1\22\3\21\1\22\4\21\1\22\27\21\5\22\4\0\1\22"+
    "\13\0\1\21\7\0\64\21\14\0\2\22\62\21\22\22\12\0\12\22"+
    "\6\0\22\22\6\21\3\0\1\21\1\0\2\21\13\22\34\21\10\22"+
    "\2\0\27\21\15\22\14\0\35\21\3\0\4\22\57\21\16\22\16\0"+
    "\1\21\12\22\6\0\5\21\1\22\12\21\12\22\5\21\1\0\51\21"+
    "\16\22\11\0\3\21\1\22\10\21\2\22\2\0\12\22\6\0\27\21"+
    "\3\0\1\21\3\22\62\21\1\22\1\21\3\22\2\21\2\22\5\21"+
    "\2\22\1\21\1\22\1\21\30\0\3\21\2\0\13\21\5\22\2\0"+
    "\3\21\2\22\12\0\6\21\2\0\6\21\2\0\6\21\11\0\7\21"+
    "\1\0\7\21\1\0\53\21\1\0\16\21\6\0\163\21\10\22\1\0"+
    "\2\22\2\0\12\22\6\0\u2ba4\21\14\0\27\21\4\0\61\21\u2104\0"+
    "\u016e\21\2\0\152\21\46\0\7\21\14\0\5\21\5\0\1\21\1\22"+
    "\12\21\1\0\15\21\1\0\5\21\1\0\1\21\1\0\2\21\1\0"+
    "\2\21\1\0\154\21\41\0\u016b\21\22\0\100\21\2\0\66\21\50\0"+
    "\15\21\3\0\20\22\20\0\20\22\3\0\2\21\30\0\3\21\31\0"+
    "\1\21\6\0\5\21\1\0\207\21\2\0\1\22\4\0\1\21\13\0"+
    "\12\22\7\0\32\21\4\0\1\21\1\0\32\21\13\0\131\21\3\0"+
    "\6\21\2\0\6\21\2\0\6\21\2\0\3\21\3\0\2\21\3\0"+
    "\2\21\22\0\3\22\1\0\1\54\2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\2\5\6\6\1\1"+
    "\10\6\1\7\1\10\1\11\1\12\1\1\1\13\1\14"+
    "\2\1\1\6\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\2\1\0\7\6"+
    "\1\0\5\6\1\30\1\6\1\31\2\6\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\6\2\0\10\6"+
    "\1\41\5\6\1\42\3\6\2\0\1\43\1\6\1\44"+
    "\1\45\1\46\4\6\1\47\3\6\1\50\2\6\1\0"+
    "\4\6\1\51\1\52\1\6\1\53\1\54\1\55\1\0"+
    "\1\56\1\6\1\57\2\6\1\60\1\61\1\62\1\6"+
    "\1\63";

  private static int [] zzUnpackAction() {
    int [] result = new int[132];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\70\0\250\0\70\0\70\0\340"+
    "\0\u0118\0\u0150\0\u0188\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0"+
    "\0\u02d8\0\u0310\0\u0348\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460"+
    "\0\70\0\70\0\u0498\0\u04d0\0\u0508\0\u0540\0\u0578\0\u05b0"+
    "\0\u05e8\0\70\0\70\0\70\0\70\0\70\0\70\0\70"+
    "\0\70\0\70\0\70\0\70\0\u0620\0\u0658\0\u0690\0\u06c8"+
    "\0\u0700\0\u0738\0\u0770\0\u07a8\0\u07e0\0\u0818\0\u0850\0\u0888"+
    "\0\u08c0\0\u08f8\0\u0930\0\u0188\0\u0968\0\u0188\0\u09a0\0\u09d8"+
    "\0\70\0\70\0\70\0\70\0\70\0\70\0\70\0\u0a10"+
    "\0\u0a48\0\u0a80\0\u0ab8\0\u0af0\0\u0b28\0\u0b60\0\u0b98\0\u0bd0"+
    "\0\u0c08\0\u0c40\0\70\0\u0c78\0\u0cb0\0\u0ce8\0\u0d20\0\u0d58"+
    "\0\u0188\0\u0d90\0\u0dc8\0\u0e00\0\u0e38\0\u0e70\0\u0188\0\u0ea8"+
    "\0\u0188\0\u0188\0\u0188\0\u0ee0\0\u0f18\0\u0f50\0\u0f88\0\u0188"+
    "\0\u0fc0\0\u0ff8\0\u1030\0\u0188\0\u1068\0\u10a0\0\u10d8\0\u1110"+
    "\0\u1148\0\u1180\0\u11b8\0\u0188\0\u0188\0\u11f0\0\u0188\0\u0188"+
    "\0\u0188\0\u1228\0\u0188\0\u1260\0\u0188\0\u1298\0\u12d0\0\70"+
    "\0\u0188\0\u0188\0\u1308\0\u0188";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[132];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\2\13\1\16\1\17\1\13"+
    "\1\2\1\20\3\13\1\21\1\22\1\13\1\23\1\24"+
    "\1\25\1\26\1\13\1\27\1\13\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\13"+
    "\1\2\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\72\0\1\4\71\0\1\55"+
    "\1\56\70\0\2\10\66\0\3\13\1\57\6\13\1\0"+
    "\20\13\11\0\2\13\22\0\5\13\1\60\4\13\1\0"+
    "\20\13\11\0\2\13\22\0\12\13\1\0\20\13\11\0"+
    "\2\13\22\0\10\13\1\61\1\13\1\0\7\13\1\62"+
    "\1\63\7\13\11\0\2\13\22\0\7\13\1\64\2\13"+
    "\1\0\20\13\11\0\2\13\22\0\12\13\1\0\14\13"+
    "\1\65\3\13\11\0\2\13\14\0\2\66\1\0\65\66"+
    "\6\0\3\13\1\67\6\13\1\0\20\13\11\0\2\13"+
    "\22\0\7\13\1\70\1\71\1\13\1\0\3\13\1\72"+
    "\14\13\11\0\2\13\22\0\5\13\1\73\4\13\1\0"+
    "\20\13\11\0\2\13\22\0\12\13\1\0\3\13\1\74"+
    "\14\13\11\0\2\13\22\0\12\13\1\0\3\13\1\75"+
    "\14\13\11\0\2\13\22\0\6\13\1\76\3\13\1\0"+
    "\20\13\11\0\2\13\22\0\12\13\1\0\15\13\1\77"+
    "\2\13\11\0\2\13\22\0\3\13\1\100\6\13\1\0"+
    "\20\13\11\0\2\13\55\0\1\101\72\0\1\102\67\0"+
    "\1\103\67\0\1\104\67\0\1\105\73\0\1\106\70\0"+
    "\1\107\24\0\12\13\1\0\20\13\11\0\1\13\1\110"+
    "\14\0\1\55\1\3\1\4\65\55\5\111\1\112\62\111"+
    "\6\0\4\13\1\113\5\13\1\0\20\13\11\0\2\13"+
    "\22\0\2\13\1\114\4\13\1\115\2\13\1\0\20\13"+
    "\11\0\2\13\22\0\11\13\1\116\1\0\20\13\11\0"+
    "\2\13\22\0\4\13\1\117\5\13\1\0\20\13\11\0"+
    "\2\13\22\0\2\13\1\120\7\13\1\0\20\13\11\0"+
    "\2\13\22\0\10\13\1\121\1\13\1\0\20\13\11\0"+
    "\2\13\22\0\12\13\1\0\13\13\1\122\4\13\11\0"+
    "\2\13\34\0\1\123\55\0\12\13\1\0\3\13\1\124"+
    "\7\13\1\125\4\13\11\0\2\13\22\0\11\13\1\126"+
    "\1\0\20\13\11\0\2\13\22\0\7\13\1\127\2\13"+
    "\1\0\20\13\11\0\2\13\22\0\12\13\1\0\7\13"+
    "\1\130\10\13\11\0\2\13\22\0\12\13\1\0\14\13"+
    "\1\131\3\13\11\0\2\13\22\0\12\13\1\0\13\13"+
    "\1\132\4\13\11\0\2\13\22\0\12\13\1\0\13\13"+
    "\1\133\4\13\11\0\2\13\22\0\5\13\1\134\4\13"+
    "\1\0\20\13\11\0\2\13\22\0\12\13\1\0\20\13"+
    "\11\0\2\13\1\135\13\0\5\111\1\136\62\111\4\0"+
    "\1\4\1\112\70\0\5\13\1\137\4\13\1\0\20\13"+
    "\11\0\2\13\22\0\4\13\1\140\5\13\1\0\20\13"+
    "\11\0\2\13\22\0\12\13\1\0\11\13\1\141\6\13"+
    "\11\0\2\13\22\0\5\13\1\142\4\13\1\0\20\13"+
    "\11\0\2\13\22\0\12\13\1\0\5\13\1\143\12\13"+
    "\11\0\2\13\22\0\5\13\1\144\4\13\1\0\20\13"+
    "\11\0\2\13\22\0\11\13\1\113\1\0\20\13\11\0"+
    "\2\13\22\0\2\13\1\145\7\13\1\0\20\13\11\0"+
    "\2\13\22\0\12\13\1\0\4\13\1\146\13\13\11\0"+
    "\2\13\22\0\12\13\1\0\7\13\1\147\10\13\11\0"+
    "\2\13\22\0\5\13\1\150\4\13\1\0\20\13\11\0"+
    "\2\13\22\0\11\13\1\151\1\0\20\13\11\0\2\13"+
    "\22\0\2\13\1\152\6\13\1\153\1\0\20\13\11\0"+
    "\2\13\22\0\12\13\1\0\11\13\1\154\6\13\11\0"+
    "\2\13\22\0\10\13\1\155\1\13\1\0\20\13\11\0"+
    "\2\13\22\0\7\13\1\156\2\13\1\0\20\13\11\0"+
    "\2\13\66\0\1\157\15\0\4\111\1\4\1\136\62\111"+
    "\6\0\3\13\1\160\6\13\1\0\20\13\11\0\2\13"+
    "\22\0\12\13\1\0\7\13\1\161\10\13\11\0\2\13"+
    "\22\0\12\13\1\0\6\13\1\162\11\13\11\0\2\13"+
    "\22\0\3\13\1\163\6\13\1\0\20\13\11\0\2\13"+
    "\22\0\2\13\1\164\7\13\1\0\20\13\11\0\2\13"+
    "\22\0\11\13\1\165\1\0\20\13\11\0\2\13\22\0"+
    "\12\13\1\0\13\13\1\166\4\13\11\0\2\13\22\0"+
    "\2\13\1\167\7\13\1\0\20\13\11\0\2\13\22\0"+
    "\5\13\1\170\4\13\1\0\20\13\11\0\2\13\22\0"+
    "\12\13\1\0\17\13\1\171\11\0\2\13\67\0\1\172"+
    "\22\0\12\13\1\0\7\13\1\173\10\13\11\0\2\13"+
    "\22\0\12\13\1\0\11\13\1\174\6\13\11\0\2\13"+
    "\22\0\12\13\1\0\15\13\1\175\2\13\11\0\2\13"+
    "\22\0\7\13\1\176\2\13\1\0\20\13\11\0\2\13"+
    "\22\0\12\13\1\0\7\13\1\177\10\13\11\0\2\13"+
    "\70\0\1\200\21\0\11\13\1\201\1\0\20\13\11\0"+
    "\2\13\22\0\12\13\1\0\5\13\1\202\12\13\11\0"+
    "\2\13\22\0\4\13\1\203\5\13\1\0\20\13\11\0"+
    "\2\13\22\0\5\13\1\204\4\13\1\0\20\13\11\0"+
    "\2\13\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4928];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\1\1\2\11\21\1\2\11"+
    "\7\1\13\11\1\1\1\0\7\1\1\0\12\1\7\11"+
    "\1\1\2\0\10\1\1\11\11\1\2\0\20\1\1\0"+
    "\12\1\1\0\5\1\1\11\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[132];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

    // create a symbol from the given symbol type
    private Symbol new_symbol( int type )
    {
        return new Symbol( type, yyline+1, yycolumn );
    }
	
    // create a symbol from the given symbol type and its value
    private Symbol new_symbol( int type, Object value )
    {
        return new Symbol( type, yyline+1, yycolumn, value );
    }

    // create a lexical error object
    private CompilerError new_error( String message )
    {
        return new CompilerError( yyline+1, message, CompilerError.CompilerErrorType.LEXICAL_ERROR );
    }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2292) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 15: 
          { return new_symbol( sym.dot, yytext() );
          }
        case 52: break;
        case 35: 
          { return new_symbol( sym.bool_lit, Boolean.parseBoolean( yytext() ) );
          }
        case 53: break;
        case 14: 
          { return new_symbol( sym.comma, yytext() );
          }
        case 54: break;
        case 18: 
          { return new_symbol( sym.lparen, yytext() );
          }
        case 55: break;
        case 1: 
          { return new_symbol( sym.error, new_error( "Syntax error" ) );
          }
        case 56: break;
        case 38: 
          { return new_symbol( sym.error /*sym.ENUM_K*/, new_error( "Enum not implemented" ) );
          }
        case 57: break;
        case 11: 
          { return new_symbol( sym.gt, yytext() );
          }
        case 58: break;
        case 5: 
          { return new_symbol( sym.int_lit, Integer.parseInt( yytext() ) );
          }
        case 59: break;
        case 16: 
          { return new_symbol( sym.lbrace, yytext() );
          }
        case 60: break;
        case 12: 
          { return new_symbol( sym.lt, yytext() );
          }
        case 61: break;
        case 29: 
          { return new_symbol( sym.ge, yytext() );
          }
        case 62: break;
        case 43: 
          { return new_symbol( sym.CONST_K, yytext() );
          }
        case 63: break;
        case 51: 
          { return new_symbol( sym.CONTINUE_K, yytext() );
          }
        case 64: break;
        case 30: 
          { return new_symbol( sym.le, yytext() );
          }
        case 65: break;
        case 33: 
          { return new_symbol( sym.char_lit, yytext().charAt( 1 ) );
          }
        case 66: break;
        case 21: 
          { return new_symbol( sym.rbracket, yytext() );
          }
        case 67: break;
        case 45: 
          { return new_symbol( sym.BREAK_K, yytext() );
          }
        case 68: break;
        case 37: 
          { return new_symbol( sym.ELSE_K, yytext() );
          }
        case 69: break;
        case 39: 
          { return new_symbol( sym.CASE_K, yytext() );
          }
        case 70: break;
        case 9: 
          { return new_symbol( sym.perc, yytext() );
          }
        case 71: break;
        case 41: 
          { return new_symbol( sym.PRINT_K, yytext() );
          }
        case 72: break;
        case 50: 
          { return new_symbol( sym.PROGRAM_K, yytext() );
          }
        case 73: break;
        case 24: 
          { return new_symbol( sym.DO_K, yytext() );
          }
        case 74: break;
        case 22: 
          { return new_symbol( sym.qmark, yytext() );
          }
        case 75: break;
        case 46: 
          { return new_symbol( sym.RETURN_K, yytext() );
          }
        case 76: break;
        case 28: 
          { return new_symbol( sym.ne, yytext() );
          }
        case 77: break;
        case 4: 
          { return new_symbol( sym.mul, yytext() );
          }
        case 78: break;
        case 19: 
          { return new_symbol( sym.rparen, yytext() );
          }
        case 79: break;
        case 32: 
          { return new_symbol( sym.or, yytext() );
          }
        case 80: break;
        case 40: 
          { return new_symbol( sym.VOID_K, yytext() );
          }
        case 81: break;
        case 36: 
          { return new_symbol( sym.READ_K, yytext() );
          }
        case 82: break;
        case 7: 
          { return new_symbol( sym.plus, yytext() );
          }
        case 83: break;
        case 49: 
          { return new_symbol( sym.EXTENDS_K, yytext() );
          }
        case 84: break;
        case 47: 
          { return new_symbol( sym.SWITCH_K, yytext() );
          }
        case 85: break;
        case 17: 
          { return new_symbol( sym.rbrace, yytext() );
          }
        case 86: break;
        case 8: 
          { return new_symbol( sym.minus, yytext() );
          }
        case 87: break;
        case 25: 
          { return new_symbol( sym.IF_K, yytext() );
          }
        case 88: break;
        case 27: 
          { return new_symbol( sym.eq, yytext() );
          }
        case 89: break;
        case 13: 
          { return new_symbol( sym.semicol, yytext() );
          }
        case 90: break;
        case 10: 
          { return new_symbol( sym.assign, yytext() );
          }
        case 91: break;
        case 6: 
          { return new_symbol( sym.ident, yytext() );
          }
        case 92: break;
        case 23: 
          { return new_symbol( sym.colon, yytext() );
          }
        case 93: break;
        case 48: 
          { return new_symbol( sym.minusminus, yytext() );
          }
        case 94: break;
        case 3: 
          { return new_symbol( sym.div, yytext() );
          }
        case 95: break;
        case 44: 
          { return new_symbol( sym.WHILE_K, yytext() );
          }
        case 96: break;
        case 42: 
          { return new_symbol( sym.CLASS_K, yytext() );
          }
        case 97: break;
        case 31: 
          { return new_symbol( sym.and, yytext() );
          }
        case 98: break;
        case 26: 
          { return new_symbol( sym.plusplus, yytext() );
          }
        case 99: break;
        case 20: 
          { return new_symbol( sym.lbracket, yytext() );
          }
        case 100: break;
        case 2: 
          { 
          }
        case 101: break;
        case 34: 
          { return new_symbol( sym.NEW_K, yytext() );
          }
        case 102: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {     return new_symbol( sym.EOF );
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
