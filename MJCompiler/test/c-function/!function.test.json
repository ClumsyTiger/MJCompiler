// IMPORTANT: all paths here should be relative to this (test batch) file!
{
    "BatchName": "Function tests",
    "TestGroupList": [
        {
            "TestGroupName": "Function compilation",
            "FilePath": "./function.mj",
            "ExCompileOutput": [],
            "ExExitCode": 0,
            "TestUnitList": [
                {
                    "TestName": "Function input 1",
                    "TestInput": [],
                    "ExTestOutput": [
                        "3 2  6",
                        "",
                    ],
                    "ExExitCode": 0,
                },
            ],
        },
        {
            "TestGroupName": "Recursion-1 compilation",
            "FilePath": "./recursion-1.mj",
            "ExCompileOutput": [],
            "ExExitCode": 0,
            "TestUnitList": [
                {
                    "TestName": "Recursion-1 input 1",
                    "TestInput": [],
                    "ExTestOutput": [
                        "1 ",
                        "1 1 ",
                        "1 2 1 ",
                        "1 3 3 1 ",
                        "1 4 6 4 1 ",
                        "1 5 10 10 5 1 ",
                        "1 6 15 20 15 6 1 ",
                        "",
                    ],
                    "ExExitCode": 0,
                },
            ],
        },
        {
            "TestGroupName": "Recursion-2 compilation",
            "FilePath": "./recursion-2.mj",
            "ExCompileOutput": [],
            "ExExitCode": 0,
            "TestUnitList": [
                {
                    "TestName": "Recursion-2 input 1",
                    "TestInput": [],
                    "ExTestOutput": [
                        "1 ",
                        "1 1 ",
                        "1 2 1 ",
                        "1 3 3 1 ",
                        "1 4 6 4 1 ",
                        "1 5 10 10 5 1 ",
                        "1 6 15 20 15 6 1 ",
                        "",
                    ],
                    "ExExitCode": 0,
                },
            ],
        },
        {
            "TestGroupName": "Recursion-3 compilation",
            "FilePath": "./recursion-3.mj",
            "ExCompileOutput": [],
            "ExExitCode": 0,
            "TestUnitList": [
                {
                    "TestName": "Recursion-3 input 1",
                    "TestInput": [],
                    "ExTestOutput": [
                        " 1  2  3  4 ",
                        " 2  3  4  5 ",
                        " 3  5  7  9 ",
                        " 5 13 ",
                        "-- exception at address 114: expression stack overflow",
                        "",
                    ],
                    "ExExitCode": 0,
                },
            ],
        },
        {
            "TestGroupName": "Return-error compilation",
            "FilePath": "./return-error.mj",
            "ExCompileOutput": [],
            "ExExitCode": 0,
            "TestUnitList": [
                {
                    "TestName": "Return-error input 1",
                    "TestInput": [],
                    "ExTestOutput": [
                        "",
                        "-- exception at address 29: trap(1)",
                        "",
                    ],
                    "ExExitCode": -1,
                },
            ],
        },
        {
            "TestGroupName": "Function declaration errors",
            "FilePath": "./declaration-error.mj",
            "ExCompileOutput": [
                "Ln 5   Col 9   SYN     Bad variable name",
                "```-```",
                "Ln 8   Col 8   SYN     Bad variable type",
                "```void;",
                "",
                "    {",
                "        void null() {}",
                "        void```",
                "Ln 12  Col 16  SYN     Bad variable name",
                "```( intt arr[]```",
                "Ln 12  Col 29  SYN     Bad variable name",
                "```,```",
                "Ln 12  Col 37  SYN     Bad variable name",
                "```b```",
                "Ln 12  Col 46  SYN     Bad variable name",
                "```c```",
                "Ln 12  Col 48  SYN     Bad variable name",
                "```,```",
                "Ln 12  Col 50  SYN     Bad variable name",
                "```) {}",
                "        void bad(```",
                "Ln 13  Col 20  SYN     Bad variable name",
                "```) {}",
                "",
                "        int foo( int arr[]```",
                "Ln 15  Col 33  SYN     Bad variable name",
                "```b```",
                "Ln 15  Col 41  SYN     Bad variable name",
                "```c )",
                "            int i```",
                "Ln 18  Col 14  SYN     Bad variable type",
                "```= this.```",
                "Ln 18  Col 24  SYN     Bad variable name",
                "```( arr```",
                "Ln 18  Col 33  SYN     Bad variable name",
                "```)```",
                "Ln 19  Col 14  SYN     Bad variable type",
                "```=```",
                "Ln 19  Col 19  SYN     Bad variable name",
                "```( arr```",
                "Ln 19  Col 28  SYN     Bad variable name",
                "```)```",
                "Ln 20  Col 12  SYN     Bad variable name",
                "```return null```",
                "Ln 22  Col 4   SYN     Bad variable type",
                "```}",
                "}",
                "",
                "{",
                "    void```",
                "Ln 26  Col 12  SYN     Bad variable name",
                "```( int arr[]```",
                "Ln 26  Col 30  SYN     Bad variable name",
                "```b```",
                "Ln 26  Col 38  SYN     Bad variable name",
                "```c ) { return 5```",
                "Ln 26  Col 54  SYN     Bad variable type",
                "```}",
                "",
                "    void```",
                "Ln 28  Col 13  SYN     Bad variable name",
                "```()",
                "        int a```",
                "Ln 34  Col 8   SYN     Bad variable type",
                "```return 1;```",
                "Ln 35  Col 10  SYN     Bad variable name",
                "```= new C```",
                "Ln 37  Col 11  SYN     Bad variable type",
                "```();```",
                "Ln 38  Col 11  SYN     Bad variable name",
                "```( arr )```",
                "Ln 39  Col 11  SYN     Bad variable type",
                "```(```",
                "Ln 39  Col 26  SYN     Bad variable name",
                "```)```",
                "Ln 40  Col 11  SYN     Bad variable type",
                "```(```",
                "Ln 40  Col 21  SYN     Bad variable name",
                "```)```",
                "Ln 41  Col 11  SYN     Bad variable type",
                "```(```",
                "Ln 41  Col 23  SYN     Bad variable name",
                "```)```",
                "Ln 43  Col 9   SYN     Bad variable type",
                "```.```",
                "Ln 43  Col 13  SYN     Bad variable name",
                "```()```",
                "Ln 44  Col 9   SYN     Bad variable type",
                "```.```",
                "Ln 44  Col 13  SYN     Bad variable name",
                "```(```",
                "Ln 44  Col 17  SYN     Bad variable name",
                "```)```",
                "Ln 45  Col 9   SYN     Bad variable type",
                "```.```",
                "Ln 45  Col 13  SYN     Bad variable name",
                "```( asdfl kajsdf lk )```",
                "Ln 46  Col 9   SYN     Bad variable type",
                "```.```",
                "Ln 46  Col 14  SYN     Bad variable name",
                "```()```",
                "Ln 47  Col 9   SYN     Bad variable type",
                "```.```",
                "Ln 47  Col 13  SYN     Bad variable name",
                "```( b```",
                "Ln 47  Col 23  SYN     Bad variable name",
                "```)```",
                "Ln 48  Col 9   SYN     Bad variable type",
                "```.```",
                "Ln 48  Col 13  SYN     Bad variable name",
                "```( a```",
                "Ln 48  Col 23  SYN     Bad variable name",
                "```)```",
                "Ln 49  Col 9   SYN     Bad variable type",
                "```.```",
                "Ln 49  Col 13  SYN     Bad variable name",
                "```( arr```",
                "Ln 49  Col 25  SYN     Bad variable name",
                "```)```",
                "Ln 50  Col 4   SYN     Couldn't repair and continue parse",
                "```}```",
                "",
                "Lexer: 0   Syntax: 53  Semantic: 0  ",
                "",
            ],
            "ExExitCode": -1,
            "TestUnitList": [],
        },
    ]
}

