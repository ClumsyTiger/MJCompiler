// IMPORTANT: all paths here should be relative to this (test batch) file!
{
    "BatchName": "Arithmetic tests",
    "TestGroupList": [
        {
            "TestGroupName": "Arithmetic compilation",
            "FilePath": "./arithmetic.mj",
            "ExCompileOutput": [],
            "ExExitCode": 0,
            "TestUnitList": [
                {
                    "TestName": "Arithmetic input 1",
                    "TestInput": [],
                    "ExTestOutput": [
                        "5+5=10",
                        "5-5=0",
                        "5*5=25",
                        "5/5=1",
                        "5%5=0",
                        "-5*5=-25",
                        "(-5)*5=-25",
                        "5*(-5)=-25",
                        "(-5)*(-5)=25",
                        "1*2-3*4/5+6*7%8=2",
                        "",
                    ],
                    "ExExitCode": 0,
                },
            ],
        },
        {
            "TestGroupName": "Logical compilation",
            "FilePath": "./logical.mj",
            "ExCompileOutput": [],
            "ExExitCode": 0,
            "TestUnitList": [
                {
                    "TestName": "Logical input 1",
                    "TestInput": [],
                    "ExTestOutput": [
                        "true",
                        "true",
                        "true",
                        "true",
                        "true",
                        "",
                    ],
                    "ExExitCode": 0,
                },
            ],
        },
        {
            "TestGroupName": "Predefined compilation",
            "FilePath": "./predefined.mj",
            "ExCompileOutput": [],
            "ExExitCode": 0,
            "TestUnitList": [
                {
                    "TestName": "Predefined input 1",
                    "TestInput": [],
                    "ExTestOutput": [
                        "eol='",
                        "'",
                        "0= 0",
                        "5= 5",
                        "5=-5",
                        "pi=314159",
                        "e=271828",
                        "",
                    ],
                    "ExExitCode": 0,
                },
            ],
        },
        {
            "TestGroupName": "Read-and-print compilation",
            "FilePath": "./read-and-print.mj",
            "ExCompileOutput": [],
            "ExExitCode": 0,
            "TestUnitList": [
                {
                    "TestName": "Read-and-print input 1",
                    "TestInput": [
                        "A 2 2"
                    ],
                    "ExTestOutput": [
                        "char c = A",
                        "bool b = 1",
                        "int a = 2",
                        "",
                    ],
                    "ExExitCode": 0,
                },
                {
                    "TestName": "Read-and-print input 2",
                    "TestInput": [
                        "a 0 0"
                    ],
                    "ExTestOutput": [
                        "char c = a",
                        "bool b = 0",
                        "int a = 0",
                        "",
                    ],
                    "ExExitCode": 0,
                },
                {
                    "TestName": "Read-and-print input 3",
                    "TestInput": [
                        "' -1 -1"
                    ],
                    "ExTestOutput": [
                        "char c = '",
                        "bool b = 1",
                        "int a = -1",
                        "",
                    ],
                    "ExExitCode": 0,
                },
            ],
        },
        {
            "TestGroupName": "Scope compilation",
            "FilePath": "./scope.mj",
            "ExCompileOutput": [],
            "ExExitCode": 0,
            "TestUnitList": [
                {
                    "TestName": "Scope input 1",
                    "TestInput": [],
                    "ExTestOutput": [
                        "1",
                    ],
                    "ExExitCode": 0,
                },
            ],
        },
        {
            "TestGroupName": "Variable compilation",
            "FilePath": "./variable.mj",
            "ExCompileOutput": [],
            "ExExitCode": 0,
            "TestUnitList": [
                {
                    "TestName": "Variable input 1",
                    "TestInput": [],
                    "ExTestOutput": [
                        "a=5",
                        "c=5",
                        "b=0",
                        "arr[]=1,3,7,15",
                        "a=pi=314159",
                        "a=e=271828",
                        "a++=271829",
                        "a--=271828",
                        "a=1*2+3%4+5*6%7=7",
                        "b=false=0",
                        "b=true=1",
                        "",
                    ],
                    "ExExitCode": 0,
                },
            ],
        },
        {
            "TestGroupName": "Expression errors",
            "FilePath": "./expression-error.mj",
            "ExCompileOutput": [
                "__main__.mj:3:14: Syntax: Bad variable name",
                "     2 | program __expression_error__",
                "   > 3 |     intt nula = 0, jedan =123, 2dva = 2, tri*, cetiri;",
                "       |               ^ *                                     ",
                "     4 |     int;",
                "",
                "__main__.mj:3:31: Lexical: Bad token",
                "     2 | program __expression_error__",
                "   > 3 |     intt nula = 0, jedan =123, 2dva = 2, tri*, cetiri;",
                "       |                                ^                      ",
                "     4 |     int;",
                "",
                "__main__.mj:3:25: Syntax: Bad variable name",
                "     2 | program __expression_error__",
                "   > 3 |     intt nula = 0, jedan =123, 2dva = 2, tri*, cetiri;",
                "       |                          ^*                           ",
                "     4 |     int;",
                "",
                "__main__.mj:3:31: Syntax: Bad variable name",
                "     2 | program __expression_error__",
                "   > 3 |     intt nula = 0, jedan =123, 2dva = 2, tri*, cetiri;",
                "       |                                ^      *               ",
                "     4 |     int;",
                "",
                "__main__.mj:3:44: Syntax: Bad variable name",
                "     2 | program __expression_error__",
                "   > 3 |     intt nula = 0, jedan =123, 2dva = 2, tri*, cetiri;",
                "       |                                             ^         ",
                "     4 |     int;",
                "",
                "__main__.mj:4:7: Syntax: Bad variable type",
                "     3 |     intt nula = 0, jedan =123, 2dva = 2, tri*, cetiri;",
                "   > 4 |     int;",
                "       |        ^",
                "     5 |     int a, b, -c;",
                "",
                "__main__.mj:5:8: Syntax: Bad variable name",
                "     4 |     int;",
                "   > 5 |     int a, b, -c;",
                "       |         ^        ",
                "     6 |     int pet=5-;",
                "",
                "__main__.mj:5:14: Syntax: Bad variable name",
                "     4 |     int;",
                "   > 5 |     int a, b, -c;",
                "       |               ^* ",
                "     6 |     int pet=5-;",
                "",
                "__main__.mj:6:11: Syntax: Bad variable name",
                "     5 |     int a, b, -c;",
                "   > 6 |     int pet=5-;",
                "       |            ^ * ",
                "     7 |     int sest[6];",
                "",
                "__main__.mj:7:13: Syntax: Bad variable name",
                "     6 |     int pet=5-;",
                "   > 7 |     int sest[6];",
                "       |              ^* ",
                "     8 |     innt 123;",
                "",
                "__main__.mj:8:9: Syntax: Bad variable type",
                "     7 |     int sest[6];",
                "   > 8 |     innt 123;",
                "       |          ^  *",
                "     9 |     int a, b, c;",
                "",
                "__main__.mj:9:8: Syntax: Bad variable name",
                "     8 |     innt 123;",
                "   > 9 |     int a, b, c;",
                "       |         ^       ",
                "    10 |     const bool m1 = -1;",
                "",
                "__main__.mj:10:20: Syntax: Bad initialization",
                "     9 |     int a, b, c;",
                "  > 10 |     const bool m1 = -1;",
                "       |                     ^* ",
                "    11 |     int 'sedam[7];",
                "",
                "__main__.mj:11:8: Lexical: Bad token",
                "    10 |     const bool m1 = -1;",
                "  > 11 |     int 'sedam[7];",
                "       |         ^         ",
                "    12 |     const int b = false;",
                "",
                "__main__.mj:11:8: Syntax: Bad variable type",
                "    10 |     const bool m1 = -1;",
                "  > 11 |     int 'sedam[7];",
                "       |         ^         ",
                "    12 |     const int b = false;",
                "",
                "__main__.mj:11:15: Syntax: Bad variable name",
                "    10 |     const bool m1 = -1;",
                "  > 11 |     int 'sedam[7];",
                "       |                ^* ",
                "    12 |     const int b = false;",
                "",
                "__main__.mj:15:12: Lexical: Bad token",
                "    14 |     void main()",
                "  > 15 |         int 1z;",
                "       |             ^  ",
                "    16 |     {",
                "",
                "__main__.mj:15:12: Syntax: Bad variable type",
                "    14 |     void main()",
                "  > 15 |         int 1z;",
                "       |             ^  ",
                "    16 |     {",
                "  * 17 |         return 0;",
                "       |                 *",
                "    18 | ",
                "",
                "__main__.mj:19:16: Lexical: Bad token",
                "    18 | ",
                "  > 19 |         z = z + # + 1321 + 123;",
                "       |                 ^              ",
                "    20 |         if( z > 0 && z >> 1 ) return -1;",
                "",
                "__main__.mj:19:10: Syntax: Bad variable name",
                "    18 | ",
                "  > 19 |         z = z + # + 1321 + 123;",
                "       |           ^                *   ",
                "    20 |         if( z > 0 && z >> 1 ) return -1;",
                "",
                "__main__.mj:20:8: Syntax: Bad variable name",
                "    19 |         z = z + # + 1321 + 123;",
                "  > 20 |         if( z > 0 && z >> 1 ) return -1;",
                "       |         ^                             * ",
                "    21 |         return z +* d + e;",
                "",
                "__main__.mj:21:8: Syntax: Bad variable name",
                "    20 |         if( z > 0 && z >> 1 ) return -1;",
                "  > 21 |         return z +* d + e;",
                "       |         ^               * ",
                "    22 |     }",
                "",
                "__main__.mj:22:4: Syntax: Fatal error detected, parsing stopped",
                "    21 |         return z +* d + e;",
                "  > 22 |     }",
                "       |     ^",
                "    23 | }",
                "",
                "Lexical: 4   Syntax: 19  Semantic: 0  ",
                "",
            ],
            "ExExitCode": -1,
            "TestUnitList": [],
        },
    ]
}

